# https://aka.ms/yaml
# to deploy message should contain "the stable"
steps:

  - script: |
      FINAL_SIZE=42G 
      OUTPUT_FOLDER=/transient-builds/Debian-Multiarch

      commits_count=$(git log -n 999999 --date=raw --pretty=format:"%cd" | wc -l)
      echo "ARCH is ............. [$ARCH]"
      echo "IMAGE is ............ [$IMAGE]"
      echo "FINAL_SIZE is ....... [$FINAL_SIZE]"
      echo "OUTPUT_FOLDER is .... [$OUTPUT_FOLDER]"
      echo "build number is ..... [$commits_count]"
      echo "working folder ...... [$(pwd)]"
      echo "message ............. [$BUILD_SOURCEVERSIONMESSAGE]"

      echo "##vso[task.setvariable variable=FINAL_SIZE]$FINAL_SIZE"
      echo "##vso[task.setvariable variable=OUTPUT_FOLDER]$OUTPUT_FOLDER"
    displayName: 'INIT/MAIN [$(IMAGE)::$(ARCH)] (define FINAL_SIZE and OUTPUT_FOLDER)'

  - script: |
      bash install-build-tools.sh 
      Show-System-Stat
    displayName: 'Show System Stat on boot'

  - script: |
      lsb_release -a
      apt-cache policy qemu-system-arm
      apt-cache policy libguestfs-tools
    displayName: 'Show virtualization tools versions'

#  - script: 'export DEBIAN_FRONTEND=noninteractive; sudo apt update -qq; sudo apt upgrade -yqq'
#    displayName: 'apt upgrade'

#  - script: |
#      echo "No"; if [ false ]; then
#        echo '
#        export DEBIAN_FRONTEND=noninteractive
#        apt update -qq; apt upgrade -yqq; apt install sudo nano -yqq
#        sudo apt dist-upgrade -qqy
#        sudo apt install update-manager-core -qqy
#        sudo sed -i "s/Prompt=lts/Prompt=normal/g" /etc/update-manager/release-upgrades
#        echo "CONTENT OF /etc/update-manager/release-upgrades:"; cat /etc/update-manager/release-upgrades
#        time do-release-upgrade -f noninteractive -m server
#        ' > /tmp/upgrade-to-19.04
#        echo y | bash /tmp/upgrade-to-19.04 | cat
#      fi
#    displayName: 'Unattended do-release-upgrade'
    
  - script: |
      lsb_release -a
      apt-cache policy qemu-system-arm
      apt-cache policy libguestfs-tools
    displayName: 'Show virtualization tools versions **Again**'


  - powershell: |
      # Using an input-macro:
      Write-Host "This works: $(BINTRAY_API_KEY)"
      Write-Host "Length: $(($Env:BINTRAY_API_KEY).Length)"  
    displayName: 'Test secured vars'

  - script: |
      echo "Source Code is [$(pwd)]"; 
      sudo apt-get update -qq >/dev/null 2>/dev/null; 
      sudo apt-get install toilet fio tree -y >/dev/null 2>/dev/null || sudo apt-get install tree -y; 
      tree --du -h; 
      sudo apt-get purge man-db >/dev/null 2>/dev/null
    displayName: 'SHOW source folder structure, ACCELERATE build'

  - script: 'script=https://raw.githubusercontent.com/devizer/glist/master/install-disk-benchmark-from-source.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -sSL $script) | bash'
    displayName: 'Install disk-benchmark from sources'

#  - script: |
#      SIZE=$((1*1024*1024))
#      time disk-benchmark --path=.    --size=$SIZE --block=4096 --time=30000 --flavour=random | cat
#      sudo chown -R $(whoami) /mnt
#      time disk-benchmark --path=/mnt --size=$SIZE --block=4096 --time=30000 --flavour=random | cat
#    displayName: 'DISK benchmark using "disk-benchmark": sda1 (working) and sda2 (second)'



#  - script: |
#      SIZE=1G
#
#      function go_fio_1test() {
#        local cmd=$1
#        local disk=$2
#        local caption="$3"
#        pushd "$disk" >/dev/null
#        toilet -f term -F border "$caption ($(pwd))"
#        echo "Benchmark '$(pwd)' folder"
#        if [[ $cmd == "rand"* ]]; then
#           fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=fiotest --bs=4k --iodepth=64 --size=$SIZE --readwrite=$cmd --runtime=30 --ramp_time=20
#        else
#           fio --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=fiotest --bs=1024k --size=$SIZE --readwrite=$cmd --runtime=30 --ramp_time=20
#        fi
#        popd >/dev/null
#        echo ""
#      }
#      
#      function go_fio_4tests() {
#        local disk=$1
#        local caption=$2
#        go_fio_1test read      $disk "${caption}: Sequential read"
#        go_fio_1test write     $disk "${caption}: Sequential write"
#        go_fio_1test randread  $disk "${caption}: Random read"
#        go_fio_1test randwrite $disk "${caption}: Random write"
#        rm -f $disk/fiotest
#      }
#      
#      sudo chown -R $(whoami) /mnt
#      
#      go_fio_4tests /mnt "sdb1 (default)"
#      go_fio_4tests .    "sda1"
#      
#      file=/dev/sdb1
#      path="/sdb1-accelerated"
#      echo "Accelerating $file as $path"
#      sudo mkdir -p "$path"
#      sudo umount /mnt
#      sudo mkfs.ext2 -L ext2-accelerated "$file"
#      sudo mount -t ext2 "$file" "$path" -o rw,noatime,nodiratime,errors=remount-ro
#      sudo chown -R $(whoami) "$path"
#      df -h -T
#      echo ""
#      
#      go_fio_4tests $path "sdb1 (Accelerated)"
#      sudo umount "$path"
#
#    displayName: 'DISK benchmark using "fio": sda1 (working) and sda2 (second)'

  - script: 7z b
    displayName: 'CPU and MEMORY benchmark'


  - script: uname -a
    displayName: 'show kernel version'

  - script: | 
      printenv | sort | grep -v "BINTRAY_API_KEY="
    displayName: 'show environment'

  - script: df -T -h
    displayName: 'show disk free space'
    
  - script: |
      bash install-mono.sh
    displayName: 'INSTALL MONO on the host'

  - script: |
      mono --version; msbuild /version; echo ""; nuget >/tmp/.tmp; cat /tmp/.tmp | head -4; rm /tmp/.tmp
      mono --version >/dev/null && msbuild /version >/dev/null && nuget help >/dev/null && echo "All the fine"
    displayName: 'SHOW MONO VERSIONS on the host'

  - script: |
      sudo fdisk -l
      # 14334.9 Mb
      time sudo apt-get install btrfs-tools -y -qq
      path="/transient-builds"
      sudo mkdir -p "$path"
      
      if [ true ]; then
          sudo umount /mnt
          file=/dev/sda1
      else
          file="/mnt/BTRFS.disk"
          sudo dd if=/dev/zero of="/$file" bs=1 seek=12800M count=1
      fi
      
      sudo mkfs.btrfs -f -L a-disk "$file" -O ^extref,^skinny-metadata
      echo "MOUNTING $file as $path"
      # compress-force=zstd:13 does not work
      sudo mount -t btrfs "$file" "$path" -o defaults,noatime,nodiratime,compress-force=zlib:6,commit=298,nobarrier,space_cache
      sudo chown $(whoami) $path
      touch $path/hi
      df -T -h

    displayName: 'PREPARE /transient-builds as compressed 12G volume'
    
#  - script: |
#      SIZE=$((10*1024*1024))
#      time disk-benchmark --path=/transient-builds --size=$SIZE --block=4096 --time=30000 --flavour=random | cat
#    displayName: 'Benchmark AGAIN compressed sdb1'
    

  - script: sudo lscpu
    displayName: 'show cpu'

  - script: free -m; sudo swapon
    displayName: 'show memory usage'

  - script: |
      sudo apt-get update -yqq
      command -v gem || (sudo apt-get install -y ruby-dev; sudo gem install dpl dpl-releases)
    displayName: 'INSTALL DPL as sudo'

  - script: |
        sudo apt update -qq >/dev/null;
        sudo apt install -y libguestfs-tools sshpass sshfs qemu-system-arm qemu-block-extra qemu-utils p7zip-full \
          libguestfs-tools qemu-system-arm qemu-system-i386 \
          qemu-kvm virtinst bridge-utils cpu-checker libvirt-bin  | grep 'Setting\|Processing\|Created'

        sudo apt clean

        sudo modprobe kvm
        sudo kvm-ok
        ls -la /dev/kvm
        true

    displayName: 'INSTALL QEMU'

  - script: |
        echo "FINAL_SIZE is [$FINAL_SIZE]"
        echo "OUTPUT_FOLDER is [$OUTPUT_FOLDER]"
        # -Only Nothing ? 
        export TERM=xterm
        sudo -E pwsh -command ./image-builder.ps1 -Only_____ Nothing -Images $IMAGE -FinalSize $FINAL_SIZE -OutputFolder $OUTPUT_FOLDER | tee $BUILD_ARTIFACTSTAGINGDIRECTORY/image-builder.log
        sudo df -T -h
        echo "::--> on finish"
        cat Private-Report/*/*onfinish*
        pushd Private-Report; find .; popd
        echo "::--> said by user"
        cat Private-Report/*/$ARCH-said-by-user.log
        echo "::--> said by root"
        cat Private-Report/*/$ARCH-said-by-root.log
        echo "::--> summary"
        cat Private-Report/**/summary*
        echo "::--> Installed Packages"
        cat Private-Report/**/installed-packages*
      
    displayName: 'BUILD [$(IMAGE)::$(ARCH)] IMAGE'

  - script: tree $OUTPUT_FOLDER --du -h || true
    displayName: '$(OUTPUT_FOLDER) DISK USAGE for [$(IMAGE)::$(ARCH)]'

  - script: tree --du -h || true
    displayName: 'Working Folder DISK USAGE for [$(IMAGE)::$(ARCH)]'

  - script: |
      pwd; 
      pushd deploy;
      needDeploy=$(echo "$BUILD_SOURCEVERSIONMESSAGE" | grep -i "the stable")
      if true || [[ $needDeploy ]]; then
        sudo bash -c "BINTRAY_API_KEY=$(BINTRAY_API_KEY) pwsh deploy-to-bintray.ps1 -From $OUTPUT_FOLDER -Arch $ARCH -Image $IMAGE" | tee $BUILD_ARTIFACTSTAGINGDIRECTORY/deploy-to-bintray.log
      else
        echo 'Missing "the stable" keyword in commit message. Skip Deploy'
      fi
      popd
    displayName: 'PUBLISH [$(IMAGE)::$(ARCH)] to BINTRAY'

  - script: 'echo "Current PWD is [$(pwd)]"; tree $BUILD_REPOSITORY_LOCALPATH --du -h;'
    displayName: 'SHOW source folder structure AFTER BUILD'
  
  - script: 7z a $BUILD_ARTIFACTSTAGINGDIRECTORY/Output_Folder-$ARCH.7z -mx1 "-xr!*.raw*" "-xr!*qcow2*" "-xr!.git" "$OUTPUT_FOLDER" || true
    displayName: 'Send OUTPUT_FOLDER to artifact'
  - script: 7z a $BUILD_ARTIFACTSTAGINGDIRECTORY/Source_Folder-$ARCH.7z -mx1 "-xr!*.raw*" "-xr!*qcow2*" "-xr!.git" "$BUILD_REPOSITORY_LOCALPATH" || true
    displayName: 'Send Source_Folder to artifact'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(IMAGE)'
      
  - script: |
      Show-System-Stat
      echo
      df -h -T
    displayName: 'Show System Stat on Finish'
      