# https://aka.ms/yaml

steps:
  - script: |
      FINAL_SIZE=42G 
      OUTPUT_FOLDER=/transient-builds/Debian-Multiarch

      commits_count=$(git log -n 999999 --date=raw --pretty=format:"%cd" | wc -l)
      echo "ARCH is ............. [$ARCH]"
      echo "FINAL_SIZE is ....... [$FINAL_SIZE]"
      echo "OUTPUT_FOLDER is .... [$OUTPUT_FOLDER]"
      echo "build number is ..... [$commits_count]"
      echo "working folder ...... [$(pwd)]"
      
      echo "##vso[task.setvariable variable=FINAL_SIZE]$FINAL_SIZE"
      echo "##vso[task.setvariable variable=OUTPUT_FOLDER]$OUTPUT_FOLDER"
    displayName: 'INIT [$(ARCH)] (define FINAL_SIZE and OUTPUT_FOLDER)'

  - powershell: |
      # Using an input-macro:
      Write-Host "This works: $(BINTRAY_API_KEY)"
      Write-Host "Length: $(($Env:BINTRAY_API_KEY).Length)"  
  
  - script: 'echo "pwd is [$(pwd)]"; sudo apt-get install tree -y >/dev/null 2>/dev/null || sudo apt-get install tree -y; tree --du -h' 
    displayName: 'show folder structure'

  - script: uname -a
    displayName: 'show kernel version'

  - script: | 
      printenv | sort | grep -v "BINTRAY_API_KEY="
    displayName: 'show environment'

  - script: df -T -h
    displayName: 'show disk free space'
    
  - script: |
      bash install-mono.sh
    displayName: 'INSTALL MONO on the host'

  - script: |
      mono --version; msbuild /version; echo ""; nuget >/tmp/.tmp; cat /tmp/.tmp | head -4; rm /tmp/.tmp
      mono --version >/dev/null && msbuild /version >/dev/null && nuget help >/dev/null && echo "All the fine"
    displayName: 'SHOW MONO VERSIONS on the host'

  - script: |
      sudo fdisk -l
      # 14334.9 Mb
      time sudo apt-get install btrfs-tools -y -qq
      path="/transient-builds"
      sudo mkdir -p "$path"
      
      if [ true ]; then
          sudo umount /mnt
          file=/dev/sdb1
      else
          file="/mnt/BTRFS.disk"
          sudo dd if=/dev/zero of="/$file" bs=1 seek=12800M count=1
      fi
      
      sudo mkfs.btrfs -f -L a-disk "$file" -O ^extref,^skinny-metadata
      echo "MOUNTING $file as $path"
      sudo mount -t btrfs "$file" "$path" -o defaults,noatime,nodiratime,compress-force
      sudo chown $(whoami) $path
      touch $path/hi
      df -T -h

    displayName: 'PREPARE /transient-builds'

  - script: sudo lscpu
    displayName: 'show cpu'

  - script: free -m; sudo swapon
    displayName: 'show memory usage'


  - script: 7z b
    displayName: '7z benchmark'


  - script: |
      sudo apt-get update -yqq
      command -v gem || (sudo apt-get install -y ruby-dev; sudo gem install dpl)

    displayName: 'INSTALL DPL using sudo'

  - script: |
        sudo apt update -qq >/dev/null;
        sudo apt install -y libguestfs-tools sshpass sshfs qemu-system-arm qemu-block-extra qemu-utils p7zip-full \
          libguestfs-tools qemu-system-arm qemu-system-i386 \
          qemu-kvm libvirt-bin virtinst bridge-utils cpu-checker | grep 'Setting\|Processing\|Created'

        sudo apt clean

        sudo modprobe kvm
        sudo kvm-ok
        ls -la /dev/kvm
        true

    displayName: 'INSTALL QEMU'

  - script: |
        echo "FINAL_SIZE is [$FINAL_SIZE]"
        echo "OUTPUT_FOLDER is [$OUTPUT_FOLDER]"
        # -Only Nothing ? 
        sudo pwsh -command ./image-builder.ps1 -Only Nothing -Images $ARCH -FinalSize $FINAL_SIZE -OutputFolder $OUTPUT_FOLDER
        sudo df -T -h
        echo "::--> on finish"
        cat Private-Report/*/*onfinish*
        pushd Private-Report; find .; popd
        echo "::--> said by user"
        cat Private-Report/*/$ARCH-said-by-user.log
        echo "::--> said by root"
        cat Private-Report/*/$ARCH-said-by-root.log
        echo "::--> summary"
        cat Private-Report/**/summary*
        echo "::--> Installed Packages"
        cat Private-Report/**/installed-packages*
      
    displayName: 'BUILD [$(ARCH)] IMAGE'

  - script: tree $OUTPUT_FOLDER --du -h || true
    displayName: '$(OUTPUT_FOLDER) DISK USAGE'

  - script: tree --du -h || true
    displayName: 'Working Folder DISK USAGE'

  - script: 'pushd $OUTPUT_FOLDER; find .; popd || true'
    displayName: '[Temp, KillIt] LIST BUILD OUTPUT'

  - script: 'pwd; pushd deploy; pwsh deploy-to-bintray.ps1 -From "$OUTPUT_FOLDER" -Arch $ARCH; popd'
    displayName: 'PUBLISH to BINTRAY'

  - script: 7z a $BUILD_ARTIFACTSTAGINGDIRECTORY/Output_Folder-$ARCH.7z -mx1 "-xr!*qcow2*" "-xr!.git" "$OUTPUT_FOLDER" || true
  - script: 7z a $BUILD_ARTIFACTSTAGINGDIRECTORY/Source_Folder-$ARCH.7z -mx1 "-xr!*qcow2*" "-xr!.git" "$BUILD_REPOSITORY_LOCALPATH" || true

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'Debian-Multiarch-Artifact-$(ARCH)'
      